inputs:
  workspace:
    required: true
    type: string
  os:
    required: true
    type: string
  runs-on:
    required: true
    type: string
  builder-host:
    required: true
    type: string
  builder-target:
    required: true
    type: string
  xcode-version:
    required: true
    type: string
  LLVM_VER:
    required: true
    type: string
  rust-toolchain-name:
    required: true
    type: string
  flavor:
    required: true
    type: string

env:
  RUSTFLAGS: "-Dwarnings"
  SRC_DIR: ${{ inputs.workspace }}/rawspeed.rs
  CODECOV_TOKEN_EXISTS: false # ${{ secrets.CODECOV_TOKEN != '' }}

name: ${{ inputs.runs-on }}, XCode ${{ inputs.xcode-version }}, Rust ${{ inputs.rust-toolchain-name }}, profile ${{ inputs.flavor }}

runs:
  using: "composite"
  steps:
    - name: Remove unneeded brew formulas/casks
      shell: bash
      run: |
        set -xe
        brew update --quiet
        cd "${SRC_DIR}/.github/"
        brew bundle cleanup --quiet --force
        brew autoremove --quiet
        brew cleanup --quiet --prune=all
    - name: Install Rust
      shell: bash
      run: |
        set -xe
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain none -y
        rustup toolchain install ${{ inputs.rust-toolchain-name }} --allow-downgrade --profile minimal
        rustup default ${{ inputs.rust-toolchain-name }}
        rustup component add clippy
    - name: Install necessary packages for code coverage
      if: github.event_name == 'pull_request' || env.CODECOV_TOKEN_EXISTS == true
      shell: bash
      run: |
        set -xe
        . "$HOME/.cargo/env"
        rustup component add llvm-tools-preview
        cargo install cargo-llvm-cov
    - name: Run cargo check
      shell: bash
      run: |
        set -xe
        . "$HOME/.cargo/env"
        cd "$SRC_DIR"
        cargo check --profile ${{ inputs.flavor }} --all-targets --all-features
    - name: Run Clippy
      shell: bash
      run: |
        set -xe
        . "$HOME/.cargo/env"
        cd "$SRC_DIR"
        cargo clippy --profile ${{ inputs.flavor }} --all-targets --all-features
    - name: Build
      shell: bash
      run: |
        set -xe
        . "$HOME/.cargo/env"
        cd "$SRC_DIR"
        cargo build --profile ${{ inputs.flavor }}
    - name: Run tests
      shell: bash
      run: |
        set -xe
        . "$HOME/.cargo/env"
        cd "$SRC_DIR"
        cargo test --profile ${{ inputs.flavor }}
    - name: Run tests to collect code coverage
      shell: bash
      if: github.event_name == 'pull_request' || env.CODECOV_TOKEN_EXISTS == true
      env:
        RUSTFLAGS: "-C instrument-coverage"
      run: |
        set -xe
        . "$HOME/.cargo/env"
        cd "$SRC_DIR"
        cargo clean
        cargo llvm-cov --no-report --profile ${{ inputs.flavor }}
    - name: Aggregate code coverage
      shell: bash
      if: github.event_name == 'pull_request' || env.CODECOV_TOKEN_EXISTS == true
      run: |
        set -xe
        . "$HOME/.cargo/env"
        cd "$SRC_DIR"
        cargo llvm-cov report --codecov --output-path $SRC_DIR/codecov.json --profile ${{ inputs.flavor }}
    - name: Upload coverage reports to Codecov
      shell: bash
      if: github.event_name == 'pull_request' || env.CODECOV_TOKEN_EXISTS == true
      uses: codecov/codecov-action@v5
      env:
        OS: ${{ inputs.os }}
        BUILDER_HOST: ${{ inputs.builder-host }}
        BUILDER_TARGET: ${{ inputs.builder-target }}
        ENDIANNESS: ${{ ((inputs.builder-target == 's390x' || inputs.builder-target == 'powerpc64') && 'big') || 'little' }}
        RUST_TOOLCHAIN: ${{ inputs.rust-toolchain-name }}
        LLVM_VER: ${{ inputs.LLVM_VER }}
        RUST_PROFILE: ${{ inputs.flavor }}
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        env_vars: OS,BUILDER_HOST,BUILDER_TARGET,RUST_TOOLCHAIN,LLVM_VER,RUST_PROFILE
        flags: ${{ env.OS }}, host=${{ env.BUILDER_HOST }}, target=${{ env.BUILDER_TARGET }}, endianness=${{ env.ENDIANNESS }}, rust=${{ env.RUST_TOOLCHAIN }}, LLVM=${{ env.LLVM_VER }}, profile=${{ env.RUST_PROFILE }}
        files: ${{ env.SRC_DIR }}/codecov.json
        root_dir: ${{ env.SRC_DIR }}
        fail_ci_if_error: true
